plugins {
    id 'java'
    id 'application'
    id("com.gradleup.shadow") version "8.3.6"
    id("io.freefair.lombok") version "8.12.2.1"
}
// artifact properties
group = 'org.quickstart'
version = '0.1-SNAPSHOT'
mainClassName = 'com.getindata.flink.sessionizer.Main'
description = """Flink Quickstart Job"""
ext {
    targetDockerImageName = 'nadberezny/flink-sessionizer'
    kafkaVersion = '3.9.0'
    flinkVersion = '2.1.0'
    debeziumVersion = '3.2.0.Final'
    jacksonVersion = '2.19.2'
    slf4jVersion = '1.7.36'
    log4jVersion = '2.17.1'
    jupiterVersion = '5.10.2'
    testContainersVersion = '1.20.6'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    flinkShadowJar // dependencies which go into the shadowJar
    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

configurations.configureEach {
    resolutionStrategy {
        force "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        force "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        force "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonVersion}"
        force "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jacksonVersion}"
    }
    exclude group: 'org.codehaus.jackson'
}


dependencies {
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"

    flinkShadowJar("org.apache.flink:flink-connector-base:${flinkVersion}")
    flinkShadowJar("org.apache.flink:flink-connector-kafka:4.0.0-2.0")

    // CDC
    flinkShadowJar("org.apache.flink:flink-connector-mysql-cdc:3.3.0")
    flinkShadowJar("io.debezium:debezium-connector-mysql:${debeziumVersion}")

    flinkShadowJar("org.apache.kafka:kafka-clients:${kafkaVersion}")
    flinkShadowJar("commons-codec:commons-codec:1.18.0")
    flinkShadowJar("org.apache.commons:commons-lang3:3.17.0")

    // external config
    flinkShadowJar("com.typesafe:config:1.4.3")

    // serde
    flinkShadowJar("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    flinkShadowJar("com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonVersion}")

    // --------------------------------------------------------------
    // Dependencies that should be part of the shadow jar, e.g.
    // connectors. These must be in the flinkShadowJar configuration!
    // --------------------------------------------------------------
    //flinkShadowJar "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter:${jupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation "org.apache.flink:flink-test-utils-junit:${flinkVersion}"
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation "org.testcontainers:redpanda:${testContainersVersion}"
    testImplementation "org.testcontainers:mysql:${testContainersVersion}"
    testImplementation("org.awaitility:awaitility:4.3.0")

    testImplementation("mysql:mysql-connector-java:8.0.33")
}
// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
}
run.classpath = sourceSets.main.runtimeClasspath

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}

test {
    useJUnitPlatform()
}

tasks.register('dockerBuildAndPushImage', Exec) {
    String dockerTag
    dockerTag = project.hasProperty("dockerTag") ? project.getProperty("dockerTag") : "git rev-parse HEAD".execute().text.trim()

    String dockerPlatform
    dockerPlatform = project.hasProperty("dockerPlatform") ? project.getProperty("dockerPlatform") : "linux/amd64"

    commandLine 'docker', 'build', '--platform', dockerPlatform, '-t', "$targetDockerImageName:$dockerTag", '--push', '.'
}
dockerBuildAndPushImage.dependsOn(shadowJar)

tasks.register('dockerBuildxAndPushImage', Exec) {
    String dockerTag

    dockerTag = project.hasProperty("dockerTag") ? project.getProperty("dockerTag") : "git rev-parse HEAD".execute().text.trim()

    commandLine 'docker', 'buildx', 'build', '--platform', 'linux/amd64,linux/arm64', '-t', "$targetDockerImageName:$dockerTag", '--push', '.'
}
dockerBuildxAndPushImage.dependsOn(shadowJar)
